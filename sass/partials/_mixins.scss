/* media queries */

$break-mid: 500px;

@mixin respond-to($media) {
	@if $media == small {
		@media only screen and (max-width: $break-mid) { @content; }
	}
	@else if $media == large {
		@media only screen and (min-width: $break-mid + 1) { @content; }
	}
}

// Webkit pixel ratio
@mixin pixel-ratio($ratio) {
	@media screen and (-webkit-min-device-pixel-ratio: $ratio) {
		@content;
	}
}

// Respond Min
$fix-mqs: false !default;

@mixin respond-min($width) {
	@if $fix-mqs {
		@if $fix-mqs >= $width {
			@content;
		}
	}
	@else {
		@media screen and (min-width: $width) {
			@content;
		}
	}
}

// Respond Max
@mixin respond-max($width) {
	@if $fix-mqs {
		@if $fix-mqs < $width {
			@content;
		}
	}
	@else {
		@media screen and (max-width: $width) {
			@content;
		}
	}
}



/* grid mixins */

@mixin col {
	border:0px solid rgba(0,0,0,0);
	float:left;
	@include box-sizing(border-box);
	@include background-clip(padding-box !important);
}


/* content mixins */

// Clearfix - use like this .foo { @extend %clearfix; }
%clearfix {
	*zoom: 1;
	
	&:before, &:after {
		content: " ";
		display: table;
	}
	
  	&:after {
    	clear: both;
  	}
}

// Rem font size with fallback - use like this .foo { @include font-size(); }
@function getRem($fontSize) {
	$remSize: $fontSize / 16px;
	@return $remSize * 1rem;
}

@mixin font-size($fontSize) {
	font-size: $fontSize;
	font-size: getRem($fontSize);
}



